"""Create new tables from scratch

Revision ID: a8737e1a9edd
Revises: 
Create Date: 2023-11-12 14:24:42.643323

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "a8737e1a9edd"
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    op.execute(
        """
CREATE EXTENSION pg_trgm;
CREATE EXTENSION btree_gin;
"""
    )
    # See discussions at
    # - https://stackoverflow.com/questions/54372666/create-an-immutable-clone-of-concat-ws
    # - https://stackoverflow.com/questions/11005036/does-postgresql-support-accent-insensitive-collations/11007216#11007216
    op.execute(
        """CREATE OR REPLACE FUNCTION immutable_concat_ws(text, VARIADIC text[])
        RETURNS text
        LANGUAGE internal IMMUTABLE PARALLEL SAFE AS
        'text_concat_ws';"""
    )
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "bibliographic_entries",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("bibl_scope", sa.String(), nullable=True),
        sa.Column("bibl_scope_unit", sa.String(), nullable=True),
        sa.Column("ptr_target", sa.String(), nullable=True),
        sa.Column("ptr_type", sa.String(), nullable=True),
        sa.Column("raw_xml", sa.Text(), nullable=False),
        sa.Column("xml_id", sa.String(), nullable=False),
        sa.Column(
            "searchable_text",
            sa.Text(),
            sa.Computed(
                "\n    immutable_concat_ws(' ', ptr_target, xml_id, raw_xml)\n    ",
            ),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "cities",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("placename", sa.String(), nullable=False),
        sa.Column("pleiades_ref", sa.String(), nullable=True),
        sa.Column(
            "searchable_text",
            sa.Text(),
            sa.Computed(
                "immutable_concat_ws(' ', placename, pleiades_ref)",
            ),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("placename", name="city_placename"),
    )
    op.create_table(
        "figures",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.Text(), nullable=False),
        sa.Column("locus", sa.Text(), nullable=True),
        sa.Column(
            "searchable_text",
            sa.Text(),
            sa.Computed(
                "\n    immutable_concat_ws(' ', locus, name)\n    ",
            ),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "iip_forms",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("ana", sa.String(), nullable=True),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column("xml_id", sa.String(), nullable=False),
        sa.Column(
            "searchable_text",
            sa.Text(),
            sa.Computed(
                "\n    immutable_concat_ws(' ', description, ana)\n    ",
            ),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("xml_id"),
        sa.UniqueConstraint("xml_id", name="iip_form_xml_id"),
    )
    op.create_table(
        "iip_genres",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column("xml_id", sa.String(), nullable=False),
        sa.Column(
            "searchable_text",
            sa.Text(),
            sa.Computed(
                "\n    coalesce(description, '')\n    ",
            ),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("xml_id"),
        sa.UniqueConstraint("xml_id", name="iip_genre_xml_id"),
    )
    op.create_table(
        "iip_materials",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column("xml_id", sa.String(), nullable=False),
        sa.Column(
            "searchable_text",
            sa.Text(),
            sa.Computed(
                "\n    coalesce(description, '')\n    ",
            ),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("xml_id"),
        sa.UniqueConstraint("xml_id", name="iip_material_xml_id"),
    )
    op.create_table(
        "iip_preservations",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column("xml_id", sa.String(), nullable=False),
        sa.Column(
            "searchable_text",
            sa.Text(),
            sa.Computed(
                "\n    coalesce(description, '')\n    ",
            ),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("xml_id"),
        sa.UniqueConstraint("xml_id", name="iip_preservation_xml_id"),
    )
    op.create_table(
        "iip_religions",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column("xml_id", sa.String(), nullable=False),
        sa.Column(
            "searchable_text",
            sa.Text(),
            sa.Computed(
                "\n    coalesce(description, '')\n    ",
            ),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("xml_id"),
        sa.UniqueConstraint("xml_id", name="iip_religion_xml_id"),
    )
    op.create_table(
        "iip_writings",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column("note", sa.String(), nullable=True),
        sa.Column("xml_id", sa.String(), nullable=False),
        sa.Column(
            "searchable_text",
            sa.Text(),
            sa.Computed(
                "\n    immutable_concat_ws(' ', description, note)\n    ",
            ),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("xml_id"),
        sa.UniqueConstraint("xml_id", name="iip_writing_xml_id"),
    )
    op.create_table(
        "languages",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("label", sa.String(), nullable=False),
        sa.Column("short_form", sa.String(), nullable=False),
        sa.Column(
            "searchable_text",
            sa.Text(),
            sa.Computed(
                "\n    immutable_concat_ws(' ', short_form, label)\n    ",
            ),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("label"),
        sa.UniqueConstraint("label", name="language_label"),
        sa.UniqueConstraint("short_form"),
    )
    op.create_table(
        "provenances",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("placename", sa.String(), nullable=False),
        sa.Column(
            "searchable_text",
            sa.Text(),
            sa.Computed(
                "\n    coalesce(placename, '')\n    ",
            ),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("placename", name="provenance_placename"),
    )
    op.create_table(
        "regions",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("label", sa.String(), nullable=False),
        sa.Column("description", sa.Text(), nullable=False),
        sa.Column(
            "searchable_text",
            sa.Text(),
            sa.Computed(
                "\n    immutable_concat_ws(' ', description, label)\n    ",
            ),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("description"),
        sa.UniqueConstraint("label"),
        sa.UniqueConstraint("label", name="region_label"),
    )
    op.create_table(
        "inscriptions",
        sa.Column("not_after", sa.Integer(), nullable=True),
        sa.Column("not_before", sa.Integer(), nullable=True),
        sa.Column("parsed_at", sa.DateTime(), nullable=False),
        sa.Column("short_description", sa.String(), nullable=True),
        sa.Column("title", sa.String(), nullable=True),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("city_id", sa.Integer(), nullable=True),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column("dimensions", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column(
            "display_status",
            sa.Enum("APPROVED", "TO_CORRECT", "TO_APPROVE", name="displaystatus"),
            nullable=False,
        ),
        sa.Column("filename", sa.String(), nullable=False),
        sa.Column("iip_preservation_id", sa.Integer(), nullable=True),
        sa.Column("location_coordinates", postgresql.ARRAY(sa.Float()), nullable=True),
        sa.Column(
            "location_metadata", postgresql.JSONB(astext_type=sa.Text()), nullable=True
        ),
        sa.Column("provenance_id", sa.Integer(), nullable=True),
        sa.Column("region_id", sa.Integer(), nullable=True),
        sa.Column(
            "searchable_text",
            sa.Text(),
            sa.Computed(
                "\n        immutable_concat_ws(' ', description, replace(filename, '.xml', ''), short_description, title)\n        ",
            ),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["city_id"],
            ["cities.id"],
        ),
        sa.ForeignKeyConstraint(
            ["iip_preservation_id"],
            ["iip_preservations.id"],
        ),
        sa.ForeignKeyConstraint(
            ["provenance_id"],
            ["provenances.id"],
        ),
        sa.ForeignKeyConstraint(
            ["region_id"],
            ["regions.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("filename"),
    )
    op.create_index(
        "inscriptions_trigram_idx",
        "inscriptions",
        ["searchable_text"],
        unique=False,
        postgresql_using="gin",
        postgresql_ops={"description": "gin_trgm_ops"},
    )
    op.create_table(
        "editions",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column(
            "edition_type",
            sa.Enum(
                "DIPLOMATIC",
                "TRANSCRIPTION",
                "TRANSCRIPTION_SEGMENTED",
                "TRANSLATION",
                name="editiontype",
            ),
            nullable=False,
        ),
        sa.Column("inscription_id", sa.Integer(), nullable=True),
        sa.Column("raw_xml", sa.Text(), nullable=False),
        sa.Column("text", sa.Text(), nullable=False),
        sa.Column(
            "searchable_text",
            sa.Text(),
            sa.Computed(
                "\n        regexp_replace(normalize(text, NFKD), '[̀-ͯ]', '', 'g')\n        ",
                persisted=True,
            ),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["inscription_id"],
            ["inscriptions.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint(
            "edition_type", "inscription_id", name="edition_type_inscription_id"
        ),
    )
    op.create_table(
        "figure_inscription",
        sa.Column("figure_id", sa.Integer(), nullable=False),
        sa.Column("inscription_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["figure_id"],
            ["figures.id"],
        ),
        sa.ForeignKeyConstraint(
            ["inscription_id"],
            ["inscriptions.id"],
        ),
        sa.PrimaryKeyConstraint("figure_id", "inscription_id"),
    )
    op.create_table(
        "iip_form_inscription",
        sa.Column("iip_form_id", sa.Integer(), nullable=False),
        sa.Column("inscription_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["iip_form_id"],
            ["iip_forms.id"],
        ),
        sa.ForeignKeyConstraint(
            ["inscription_id"],
            ["inscriptions.id"],
        ),
        sa.PrimaryKeyConstraint("iip_form_id", "inscription_id"),
    )
    op.create_table(
        "iip_genre_inscription",
        sa.Column("iip_genre_id", sa.Integer(), nullable=False),
        sa.Column("inscription_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["iip_genre_id"],
            ["iip_genres.id"],
        ),
        sa.ForeignKeyConstraint(
            ["inscription_id"],
            ["inscriptions.id"],
        ),
        sa.PrimaryKeyConstraint("iip_genre_id", "inscription_id"),
    )
    op.create_table(
        "iip_material_inscription",
        sa.Column("iip_material_id", sa.Integer(), nullable=False),
        sa.Column("inscription_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["iip_material_id"],
            ["iip_materials.id"],
        ),
        sa.ForeignKeyConstraint(
            ["inscription_id"],
            ["inscriptions.id"],
        ),
        sa.PrimaryKeyConstraint("iip_material_id", "inscription_id"),
    )
    op.create_table(
        "iip_religion_inscription",
        sa.Column("iip_religion_id", sa.Integer(), nullable=False),
        sa.Column("inscription_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["iip_religion_id"],
            ["iip_religions.id"],
        ),
        sa.ForeignKeyConstraint(
            ["inscription_id"],
            ["inscriptions.id"],
        ),
        sa.PrimaryKeyConstraint("iip_religion_id", "inscription_id"),
    )
    op.create_table(
        "iip_writing_inscription",
        sa.Column("iip_writing_id", sa.Integer(), nullable=False),
        sa.Column("inscription_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["iip_writing_id"],
            ["iip_writings.id"],
        ),
        sa.ForeignKeyConstraint(
            ["inscription_id"],
            ["inscriptions.id"],
        ),
        sa.PrimaryKeyConstraint("iip_writing_id", "inscription_id"),
    )
    op.create_table(
        "images",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column("graphic_url", sa.String(), nullable=False),
        sa.Column("inscription_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["inscription_id"],
            ["inscriptions.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "inscription_bibliographic_entry",
        sa.Column("inscription_id", sa.Integer(), nullable=False),
        sa.Column("bibliographic_entry_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["bibliographic_entry_id"],
            ["bibliographic_entries.id"],
        ),
        sa.ForeignKeyConstraint(
            ["inscription_id"],
            ["inscriptions.id"],
        ),
        sa.PrimaryKeyConstraint("inscription_id", "bibliographic_entry_id"),
    )
    op.create_table(
        "language_inscription",
        sa.Column("language_id", sa.Integer(), nullable=False),
        sa.Column("inscription_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["inscription_id"],
            ["inscriptions.id"],
        ),
        sa.ForeignKeyConstraint(
            ["language_id"],
            ["languages.id"],
        ),
        sa.PrimaryKeyConstraint("language_id", "inscription_id"),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("language_inscription")
    op.drop_table("inscription_bibliographic_entry")
    op.drop_table("images")
    op.drop_table("iip_writing_inscription")
    op.drop_table("iip_religion_inscription")
    op.drop_table("iip_material_inscription")
    op.drop_table("iip_genre_inscription")
    op.drop_table("iip_form_inscription")
    op.drop_table("figure_inscription")
    op.drop_table("editions")
    op.drop_index(
        "inscriptions_trigram_idx",
        table_name="inscriptions",
        postgresql_using="gin",
        postgresql_ops={"description": "gin_trgm_ops"},
    )
    op.drop_table("inscriptions")
    op.drop_table("regions")
    op.drop_table("provenances")
    op.drop_table("languages")
    op.drop_table("iip_writings")
    op.drop_table("iip_religions")
    op.drop_table("iip_preservations")
    op.drop_table("iip_materials")
    op.drop_table("iip_genres")
    op.drop_table("iip_forms")
    op.drop_table("figures")
    op.drop_table("cities")
    op.drop_table("bibliographic_entries")
    # ### end Alembic commands ###
